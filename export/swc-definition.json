{
  "CWC-100": {
    "markdown": "# Title \nNo input validation\n\n## Relationships \n[CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)\n\n## Description  \nTODO\n\n## Remediation\nTODO",
    "content": {
      "Title": "No input validation",
      "Relationships": "[CWE-20: Improper Input Validation](https://cwe.mitre.org/data/definitions/20.html)",
      "Description": "TODO",
      "Remediation": "TODO"
    }
  },
  "CWC-101": {
    "markdown": "# Title \nNo Input type validation\n\n## Relationships\n[CWE-1287: Improper Validation of Specified Type of Input](https://cwe.mitre.org/data/definitions/1287.html)\n\n## Description \nAdding up two integers representeted as strings -> \"1\"+\"1\" = \"11\", not 2\n\n## Remediation\nTODO",
    "content": {
      "Title": "No Input type validation",
      "Relationships": "[CWE-1287: Improper Validation of Specified Type of Input](https://cwe.mitre.org/data/definitions/1287.html)",
      "Description": "Adding up two integers representeted as strings -> \"1\"+\"1\" = \"11\", not 2",
      "Remediation": "TODO"
    }
  },
  "CWC-102": {
    "markdown": "# Title \nModifying a narrow subset of keys\n\n## Relationships\nTODO \n\n## Description \nPerformance issue: Many MVCC errors triggered when more transactions try to modify narrow subset of keys\n\n## Remediation\nTODO",
    "content": {
      "Title": "Modifying a narrow subset of keys",
      "Relationships": "TODO",
      "Description": "Performance issue: Many MVCC errors triggered when more transactions try to modify narrow subset of keys",
      "Remediation": "TODO"
    }
  },
  "CWC-103": {
    "markdown": "# Title\nModifying keys in a long iteration\n\n## Relationships\n[CWE-834: Excessive Iteration](https://cwe.mitre.org/data/definitions/834.html)\n\n## Description\nDuring a long iteration there is a higher risk of MVCC errors\n\n## Remediation\nTODO",
    "content": {
      "Title": "Modifying keys in a long iteration",
      "Relationships": "[CWE-834: Excessive Iteration](https://cwe.mitre.org/data/definitions/834.html)",
      "Description": "During a long iteration there is a higher risk of MVCC errors",
      "Remediation": "TODO"
    }
  },
  "CWC-104": {
    "markdown": "# Title\nPutting private data on ledger \n\n## Relationships\n- [CWE-201: Insertion of Sensitive Information Into Sent Data](https://cwe.mitre.org/data/definitions/201.html)\n- [SWC-136: Unencrypted Private Data On-Chain](https://swcregistry.io/docs/SWC-136)\n\n\n## Description\nPassword or other transient data put on ledger with putState instead of putPrivateState\n\n## Remediation\nTODO",
    "content": {
      "Title": "Putting private data on ledger",
      "Relationships": "- [CWE-201: Insertion of Sensitive Information Into Sent Data](https://cwe.mitre.org/data/definitions/201.html)\n- [SWC-136: Unencrypted Private Data On-Chain](https://swcregistry.io/docs/SWC-136)",
      "Description": "Password or other transient data put on ledger with putState instead of putPrivateState",
      "Remediation": "TODO"
    }
  },
  "CWC-105": {
    "markdown": "# Title\nInitializing global variables in Init Function\n\n## Relationships\n[CWE-665: Improper Initialization](https://cwe.mitre.org/data/definitions/665.html)\n\n## Description\nInit function is not called on all docker startups, variables set in init function can cause stale state.\n\n## Remediation\nSet variables in constructor\n",
    "content": {
      "Title": "Initializing global variables in Init Function",
      "Relationships": "[CWE-665: Improper Initialization](https://cwe.mitre.org/data/definitions/665.html)",
      "Description": "Init function is not called on all docker startups, variables set in init function can cause stale state.",
      "Remediation": "Set variables in constructor"
    }
  },
  "CWC-106": {
    "markdown": "# Title\nNon-deterministic chaincode\n\n## Relationships\nTODO \n\n## Description\nUse of rand.New(...) or time.Now() or relying on global variable => ENDORSEMENT_POLICY_FAILURE\n\n## Remediation\nTODO",
    "content": {
      "Title": "Non-deterministic chaincode",
      "Relationships": "TODO",
      "Description": "Use of rand.New(...) or time.Now() or relying on global variable => ENDORSEMENT_POLICY_FAILURE",
      "Remediation": "TODO"
    }
  },
  "CWC-107": {
    "markdown": "# Title\nInvoking chaincode on other channel\n\n## Relationships\nTODO \n\n## Description\nNO data will be committed in the +A4:D10other channel, even if it attempts to write some. Currently, cross channel chaincode chaincode invocation does not alter data (change writesets) on the other channel. So, it is only possible to write to one channel at a time per transaction.\n\n## Remediation\nTODO",
    "content": {
      "Title": "Invoking chaincode on other channel",
      "Relationships": "TODO",
      "Description": "NO data will be committed in the +A4:D10other channel, even if it attempts to write some. Currently, cross channel chaincode chaincode invocation does not alter data (change writesets) on the other channel. So, it is only possible to write to one channel at a time per transaction.",
      "Remediation": "TODO"
    }
  },
  "CWC-108": {
    "markdown": "# Title\nNo execution timer set\n\n## Relationships\n[CWE-665: Improper Initialization](https://cwe.mitre.org/data/definitions/665.html)\n\n## Description\nDefault 30s might not be enough during high load (not chaincode specific, this has to be set in docker environment)\n\n## Remediation\nTODO",
    "content": {
      "Title": "No execution timer set",
      "Relationships": "[CWE-665: Improper Initialization](https://cwe.mitre.org/data/definitions/665.html)",
      "Description": "Default 30s might not be enough during high load (not chaincode specific, this has to be set in docker environment)",
      "Remediation": "TODO"
    }
  },
  "CWC-109": {
    "markdown": "# Title\nAccessing external sources\n\n## Relationships\n[CWE-829: Inclusion of Functionality from Untrusted Control Sphere](https://cwe.mitre.org/data/definitions/829.html)\n\n## Description\nAccessing external resources (http) might expose vulnerability and security threats to your chaincode. \n\n## Remediation\nTODO",
    "content": {
      "Title": "Accessing external sources",
      "Relationships": "[CWE-829: Inclusion of Functionality from Untrusted Control Sphere](https://cwe.mitre.org/data/definitions/829.html)",
      "Description": "Accessing external resources (http) might expose vulnerability and security threats to your chaincode.",
      "Remediation": "TODO"
    }
  },
  "CWC-110": {
    "markdown": "# Title\nUnchecked Call Return Value\n\n## Relationships\n- [SWC-104: Unchecked Call Return Value](https://swcregistry.io/docs/SWC-104)\n- [CWE-252: Unchecked Return Value](https://cwe.mitre.org/data/definitions/252.html)\n\n## Description\nThe return value of a message call is not checked. Execution will resume even if the called contract throws an exception. If the call fails accidentally or an attacker forces the call to fail, this may cause unexpected behaviour in the subsequent program logic.\n\n## Remediation\nTODO",
    "content": {
      "Title": "Unchecked Call Return Value",
      "Relationships": "- [SWC-104: Unchecked Call Return Value](https://swcregistry.io/docs/SWC-104)\n- [CWE-252: Unchecked Return Value](https://cwe.mitre.org/data/definitions/252.html)",
      "Description": "The return value of a message call is not checked. Execution will resume even if the called contract throws an exception. If the call fails accidentally or an attacker forces the call to fail, this may cause unexpected behaviour in the subsequent program logic.",
      "Remediation": "TODO"
    }
  },
  "CWC-111": {
    "markdown": "# Title \n\nDoS with Failed Call \n\n## Relationships\n- [SWC-113: DoS with Failed Call ](https://swcregistry.io/docs/SWC-113)\n- [CWE-703: Improper Check or Handling of Exceptional Conditions](https://cwe.mitre.org/data/definitions/703.html)\n\n## Description \nExternal calls can fail accidentally or deliberately, which can cause a DoS condition in the contract. To minimize the damage caused by such failures, it is better to isolate each external call into its own transaction that can be initiated by the recipient of the call. This is especially relevant for payments, where it is better to let users withdraw funds rather than push funds to them automatically (this also reduces the chance of problems with the gas limit).\n\n## Remediation\nTODO",
    "content": {
      "Title": "DoS with Failed Call",
      "Relationships": "- [SWC-113: DoS with Failed Call ](https://swcregistry.io/docs/SWC-113)\n- [CWE-703: Improper Check or Handling of Exceptional Conditions](https://cwe.mitre.org/data/definitions/703.html)",
      "Description": "External calls can fail accidentally or deliberately, which can cause a DoS condition in the contract. To minimize the damage caused by such failures, it is better to isolate each external call into its own transaction that can be initiated by the recipient of the call. This is especially relevant for payments, where it is better to let users withdraw funds rather than push funds to them automatically (this also reduces the chance of problems with the gas limit).",
      "Remediation": "TODO"
    }
  },
  "CWC-112": {
    "markdown": "# Title \nWeak Sources of Randomness from Chain Attributes\n\n## Relationships\n- [SWC-120: Weak Sources of Randomness from Chain Attributes](https://swcregistry.io/docs/SWC-120)\n- [CWE-330: Use of Insufficiently Random Values](https://cwe.mitre.org/data/definitions/330.html)\n\n## Description \nAbility to generate random numbers is very helpful in all kinds of applications. One obvious example is gambling DApps, where pseudo-random number generator is used to pick the winner. However, creating a strong enough source of randomness in Ethereum is very challenging. For example, use of `block.timestamp` is insecure, as a miner can choose to provide any timestamp within a few seconds and still get his block accepted by others. Use of `blockhash`, `block.difficulty` and other fields is also insecure, as they're controlled by the miner. If the stakes are high, the miner can mine lots of blocks in a short time by renting hardware, pick the block that has required block hash for him to win, and drop all others.\n\n## Remediation\nTODO",
    "content": {
      "Title": "Weak Sources of Randomness from Chain Attributes",
      "Relationships": "- [SWC-120: Weak Sources of Randomness from Chain Attributes](https://swcregistry.io/docs/SWC-120)\n- [CWE-330: Use of Insufficiently Random Values](https://cwe.mitre.org/data/definitions/330.html)",
      "Description": "Ability to generate random numbers is very helpful in all kinds of applications. One obvious example is gambling DApps, where pseudo-random number generator is used to pick the winner. However, creating a strong enough source of randomness in Ethereum is very challenging. For example, use of `block.timestamp` is insecure, as a miner can choose to provide any timestamp within a few seconds and still get his block accepted by others. Use of `blockhash`, `block.difficulty` and other fields is also insecure, as they're controlled by the miner. If the stakes are high, the miner can mine lots of blocks in a short time by renting hardware, pick the block that has required block hash for him to win, and drop all others.",
      "Remediation": "TODO"
    }
  }
}
